//
//  SongSearchPresenterTests.swift
//  FindYourSong
//
//  Created by Fernando Garcia on 27-02-20.
//  Copyright (c) 2020 Fernando Garcia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import FindYourSong
import XCTest

class SongSearchPresenterTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: SongSearchPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupSongSearchPresenter()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupSongSearchPresenter()
    {
        sut = SongSearchPresenter()
    }
    
    // MARK: Test doubles
    
    class SongSearchDisplayLogicSpy: SongSearchDisplayLogic
    {
        
        var getFetchedSongsCalled = false
        var getFetchedSongsViewModel: SongSearch.FetchSongs.ViewModel?
        
        func getFetchedSongs(viewModel: SongSearch.FetchSongs.ViewModel) {
            getFetchedSongsCalled = true
            getFetchedSongsViewModel = viewModel
        }
        
        var displayFilteredSongsCalled = false
        var displayFilteredSongsViewModel: SongSearch.SongsPagination.ViewModel?
        func displayFilteredSongs(viewModel: SongSearch.SongsPagination.ViewModel) {
            displayFilteredSongsCalled = true
            displayFilteredSongsViewModel = viewModel
        }
    }
    
    // MARK: Tests
    
    func testPresentFetchedSongsShouldAskViewControllerToGetFetchSongs()
    {
        // Given
        let songSearchDisplayLogicSpy = SongSearchDisplayLogicSpy()
        sut.viewController = songSearchDisplayLogicSpy
        let songs = [Song(name: "test", artistName: "test", albumArtworkUrl100: "test", previewUrl: "test", albumId: 0)]
        let response = SongSearch.FetchSongs.Response(songs: songs)
        
        // When
        sut.presentFetchedSongs(response: response)
        
        // Then
        let expectedSongs = [SongSearch.FetchSongs.ViewModel.FetchedSong(name: "test", artistName: "test", albumArtworkUrl100: "test", albumId: 0)]
        let actualSongs = songSearchDisplayLogicSpy.getFetchedSongsViewModel?.fetchedSongs
        XCTAssertTrue(songSearchDisplayLogicSpy.getFetchedSongsCalled, "presentFetchedSongs(response:) should ask the view controller to display the result")
        XCTAssertEqual(actualSongs, expectedSongs, "presentFetchedSongs(response:) should display the correct songs")
    }
    
    func testPresentFilteredSongsShouldAskViewControllerToDisplayFilteredSongs() {
        // Given
        let songSearchDisplayLogicSpy = SongSearchDisplayLogicSpy()
        sut.viewController = songSearchDisplayLogicSpy
        let songs = [Song(name: "test", artistName: "test", albumArtworkUrl100: "test", previewUrl: "test", albumId: 0)]
        let response = SongSearch.SongsPagination.Response(filteredSongs: songs, currentPage: 0, leftArrowStatus: true, rightArrowStatus: true)
        
        // Then
        sut.presentFilteredSongs(response: response)
        
        // Then
        let expectedSongs = [SongSearch.SongsPagination.ViewModel.DisplayedSong(name: "test", artistName: "test", albumArtworkUrl100: "test", albumId: 0)]
        let actualSong = songSearchDisplayLogicSpy.displayFilteredSongsViewModel?.displayedSongs
        XCTAssert(songSearchDisplayLogicSpy.displayFilteredSongsCalled, "presentFilteredSongs(response:) should ask the view controller to display the result")
        XCTAssertEqual(actualSong, expectedSongs, "presentFilteredSogns(response:) should display the correct songs")
        
    }
}
