//
//  SongSearchViewControllerTests.swift
//  FindYourSong
//
//  Created by Fernando Garcia on 27-02-20.
//  Copyright (c) 2020 Fernando Garcia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import FindYourSong
import XCTest

class SongSearchViewControllerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: SongSearchViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupSongSearchViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupSongSearchViewController()
    {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "SongSearchViewController") as? SongSearchViewController
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class TableViewSpy: UITableView {
        // MARK: Method call expectations
        
        var reloadDataCalled = false
        
        // MARK: Spied Methods
        
        override func reloadData() {
            reloadDataCalled = true
        }
    }
    
    class SongSearchBusinessLogicSpy: SongSearchBusinessLogic
    {
        var fetchSongsCalled = false
        
        func fetchSongs(request: SongSearch.FetchSongs.Request)
        {
            fetchSongsCalled = true
        }
        
        var filterSongsCalled = false
        
        func filterSongs(request: SongSearch.SongsPagination.Request) {
            filterSongsCalled = true
        }
    }
    
    // MARK: Tests
    
    func testShouldFetchSongsWhenViewIsLoaded()
    {
        // Given
        let songSearchBusinessLogicSpy = SongSearchBusinessLogicSpy()
        sut.interactor = songSearchBusinessLogicSpy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(songSearchBusinessLogicSpy.fetchSongsCalled, "viewDidLoad() should ask the interactor fetch songs")
    }
    
    func testGetFetchedSongsShouldReloadTableView() {
        // Given
        let tableViewSpy = TableViewSpy()
        sut.tableView = tableViewSpy
        loadView()
        
        // When
        let expectedSongs = [SongSearch.FetchSongs.ViewModel.FetchedSong(name: "test", artistName: "test", albumArtworkUrl100: "test", albumId: 0)]
        let viewModel = SongSearch.FetchSongs.ViewModel(fetchedSongs: expectedSongs)
        sut.getFetchedSongs(viewModel: viewModel)
        
        // Then
        let actualSongs = sut.fetchedSongs
        XCTAssertEqual(actualSongs, expectedSongs, "getFetchedSongs(viewModel:) should display the songs results")
        XCTAssert(tableViewSpy.reloadDataCalled, "getFetchedSongs(viewModel:) should reload the table view")
    }
    
    func testShouldFilterSongsAfterGettingFetchedSongs() {
        // Given
        let songSearchBusinessLogicSpy = SongSearchBusinessLogicSpy()
        sut.interactor = songSearchBusinessLogicSpy
        let viewModel = SongSearch.FetchSongs.ViewModel(fetchedSongs: [SongSearch.FetchSongs.ViewModel.FetchedSong(name: "", artistName: "", albumArtworkUrl100: "", albumId: 0)])
        
        // When
        sut.getFetchedSongs(viewModel: viewModel)
        
        // Then
        XCTAssert(songSearchBusinessLogicSpy.filterSongsCalled, "getFetchedSongs(viewModel:) should ask the interactor to filter songs")
    }
}
