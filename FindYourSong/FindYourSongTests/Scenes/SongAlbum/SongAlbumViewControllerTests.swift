//
//  SongAlbumViewControllerTests.swift
//  FindYourSong
//
//  Created by Fernando Garcia on 28-02-20.
//  Copyright (c) 2020 Fernando Garcia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import FindYourSong
import XCTest

class SongAlbumViewControllerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: SongAlbumViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupSongAlbumViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupSongAlbumViewController()
    {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "SongAlbumViewController") as? SongAlbumViewController
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class SongAlbumBusinessLogicSpy: SongAlbumBusinessLogic
    {
        var fetchAlbumCalled = false
        
        func fetchAlbum(request: SongAlbum.FetchAlbum.Request)
        {
            fetchAlbumCalled = true
        }
    }
    
    class TableViewSpy: UITableView {
        
        var reloadDataCalled = false
        
        override func reloadData() {
            reloadDataCalled = true
        }
    }
    
    // MARK: Tests
    
    func testShouldFetchAlbumWhenViewIsLoaded()
    {
        // Given
        let spy = SongAlbumBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.fetchAlbumCalled, "viewDidLoad() should ask the interactor to fetch album")
    }
    
    func testShouldDisplayFetchedAlbum()
    {
        // Given
        let tableViewSpy = TableViewSpy()
        
        // When
        let displayedAlbum = SongAlbum.FetchAlbum.ViewModel.DisplayedAlbum (name: "Rooster", artistName: "Alice in Chains", albumArtworkUrl100: "", songs: [])
        let viewModel = SongAlbum.FetchAlbum.ViewModel(displayedAlbum: displayedAlbum)
        sut.displayFetchedAlbum(viewModel: viewModel)
        
        // Then
        XCTAssert(tableViewSpy.reloadDataCalled, "Displaying fetched album should reload the table view")
    }
}
