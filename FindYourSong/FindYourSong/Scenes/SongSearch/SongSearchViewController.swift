//
//  SongSearchViewController.swift
//  FindYourSong
//
//  Created by Fernando Garcia on 27-02-20.
//  Copyright (c) 2020 Fernando Garcia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AnimatableReload


class SongCell: UITableViewCell {
    @IBOutlet weak var songNameLabel: UILabel!
    @IBOutlet weak var artistNameLabel: UILabel!
    @IBOutlet weak var albumImage: UIImageView!
}

protocol SongSearchDisplayLogic: class
{
    func getFetchedSongs(viewModel: SongSearch.FetchSongs.ViewModel)
    func displayFilteredSongs(viewModel: SongSearch.SongsPagination.ViewModel)
}

class SongSearchViewController: UITableViewController, SongSearchDisplayLogic
{
    var interactor: SongSearchBusinessLogic?
    var router: (NSObjectProtocol & SongSearchRoutingLogic & SongSearchDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = SongSearchInteractor()
        let presenter = SongSearchPresenter()
        let router = SongSearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        fetchSongs()
    }
    
    // MARK: Table view
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedSongs.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedSong = displayedSongs[indexPath.row]
        var cell = tableView.dequeueReusableCell(withIdentifier: "SongCell") as? SongCell
        if cell == nil {
            cell = UITableViewCell(style: .value1, reuseIdentifier: "SongCell") as? SongCell
        }
        cell?.songNameLabel.text = displayedSong.name
        cell?.artistNameLabel.text = displayedSong.artistName
        cell?.albumImage.downloadFromURL(url: URL(string: displayedSong.albumArtworkUrl100)!)
        return cell!
    }
    
    // MARK: Fetch Songs
    
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    
    var fetchedSongs: [SongSearch.FetchSongs.ViewModel.FetchedSong] = []
    
    func fetchSongs()
    {
        let request = SongSearch.FetchSongs.Request()
        interactor?.fetchSongs(request: request)
    }
    
    func getFetchedSongs(viewModel: SongSearch.FetchSongs.ViewModel)
    {
        fetchedSongs = viewModel.fetchedSongs
        filterSongs()
    }
    
    // MARK: Songs pagination
    
    @IBOutlet weak var leftArrowButton: UIBarButtonItem!
    @IBOutlet weak var rightArrowButton: UIBarButtonItem!
    
    var animationDirection: String = "left"
    
    var displayedSongs: [SongSearch.SongsPagination.ViewModel.DisplayedSong] = []
    var currentPage: Int = 1
    var songsPerPage: Int = 20
    
    func filterSongs() {
        let request = SongSearch.SongsPagination.Request(fetchedSongs: fetchedSongs, currentPage: currentPage, songsPerPage: songsPerPage)
        interactor?.filterSongs(request: request)
    }
    
    func displayFilteredSongs(viewModel: SongSearch.SongsPagination.ViewModel) {
        displayedSongs = viewModel.displayedSongs
        leftArrowButton.isEnabled = viewModel.leftArrowStatus
        rightArrowButton.isEnabled = viewModel.rightArrowStatus
        title = viewModel.title
        AnimatableReload.reload(tableView: tableView, animationDirection: animationDirection)
        DispatchQueue.main.async {
            self.activityIndicator?.stopAnimating()
        }
    }
    
    @IBAction func searchButtonPressed(_ sender: UIBarButtonItem) {
        navigationController?.popToRootViewController(animated: true)
    }
    
    @IBAction func leftArrowButton(_ sender: UIBarButtonItem) {
        animationDirection = "right"
        currentPage -= 1
        filterSongs()
    }
    
    @IBAction func rightArrowButton(_ sender: UIBarButtonItem) {
        animationDirection = "left"
        currentPage += 1
        filterSongs()
    }
    
}
