//
//  SongAlbumViewController.swift
//  FindYourSong
//
//  Created by Fernando Garcia on 28-02-20.
//  Copyright (c) 2020 Fernando Garcia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: Album Song Cell
class AlbumSongCell: UITableViewCell {
    @IBOutlet weak var songNameLabel: UILabel!
    @IBOutlet weak var artistNameLabel: UILabel!
    
}

protocol SongAlbumDisplayLogic: class
{
    func displayFetchedAlbum(viewModel: SongAlbum.FetchAlbum.ViewModel)
}

class SongAlbumViewController: UIViewController, SongAlbumDisplayLogic, UITableViewDataSource, UITableViewDelegate
{
    var interactor: SongAlbumBusinessLogic?
    var router: (NSObjectProtocol & SongAlbumRoutingLogic & SongAlbumDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = SongAlbumInteractor()
        let presenter = SongAlbumPresenter()
        let router = SongAlbumRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        fetchAlbum()
        songsTableView.dataSource = self
        songsTableView.delegate = self
    }
    
    // MARK: Songs table view
        
    @IBOutlet weak var songsTableView: UITableView!
    
    var indexPlaying: Int = -1
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedAlbum.songs.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedSong = displayedAlbum.songs[indexPath.row]
        var cell = tableView.dequeueReusableCell(withIdentifier: "AlbumSongCell") as? AlbumSongCell
        if cell == nil {
            cell = UITableViewCell(style: .value1, reuseIdentifier: "AlbumSongCell") as? AlbumSongCell
        }
        
        cell?.songNameLabel.text = displayedSong.name
        cell?.artistNameLabel.text = displayedSong.artistName
        return cell!
    }
    
    // MARK: Fetch Album
    var displayedAlbum: SongAlbum.FetchAlbum.ViewModel.DisplayedAlbum = SongAlbum.FetchAlbum.ViewModel.DisplayedAlbum(name: "", artistName: "", albumArtworkUrl100: "", songs: [])
    
    @IBOutlet weak var albumImage: UIImageView!
    @IBOutlet weak var albumNameLabel: UILabel!
    @IBOutlet weak var artistNameLabel: UILabel!
    
    func fetchAlbum()
    {
        let request = SongAlbum.FetchAlbum.Request()
        interactor?.fetchAlbum(request: request)
    }
    
    func displayFetchedAlbum(viewModel: SongAlbum.FetchAlbum.ViewModel)
    {
        displayedAlbum = viewModel.displayedAlbum
        albumImage.downloadFromURL(url: URL(string: displayedAlbum.albumArtworkUrl100)!)
        albumNameLabel.text = displayedAlbum.name
        artistNameLabel.text = displayedAlbum.artistName
        songsTableView.reloadData()
    }
}
